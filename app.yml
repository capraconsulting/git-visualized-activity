AWSTemplateFormatVersion: 2010-09-09

Parameters:
  AppImage:
    Type: String
  ClusterName:
    Type: String
  Env:
    Type: String
  Subnets:
    Type: String
  VpcId:
    Type: String
  WebBucketName:
    Type: String

Resources:

  # ---
  # The actual application being run as a task.
  # ---

  TaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'git-visualized-activity-${Env}-worker'
      ContainerDefinitions:
        - Name: app
          Image: !Ref AppImage
          Environment:
            - Name: PARAMS_PREFIX
              Value: !Sub '/git-visualized-activity/${Env}'
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: app
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt 'TaskExecutionRole.Arn'
      TaskRoleArn: !GetAtt 'TaskRole.Arn'

  # No need for any inbound rules, but we need a security group to start task.
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VpcId

  # Grant ECS task itself required access.
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: custom
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${WebBucketName}/*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: '*' # Cannot be restricted
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/git-visualized-activity/${Env}/*'

  # Grant ECS manager required access.
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Log output for running task.
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  # ---
  # Scheduled running the task using a lambda.
  # Workaround for missing CloudFormation support.
  # See https://stackoverflow.com/a/52543566
  # ---

  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Scheduled running
      ScheduleExpression: 'cron(0 4 * * ? *)'
      State: ENABLED
      Targets:
        - Id: launcher
          Arn: !GetAtt FargateLauncher.Arn
          Input: !Sub |
            {
              "taskDefinition": "${TaskDef}"
            }

  # The lambda function that starts the ECS task.
  FargateLauncher:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'git-visualized-activity-${Env}-worker-launcher'
      Environment:
        Variables:
          CLUSTER_NAME: !Ref ClusterName
          SUBNETS: !Ref Subnets
          SECURITY_GROUPS: !Ref SecurityGroup
      Handler: index.handler
      Role: !GetAtt FargateLauncherRole.Arn
      Runtime: python3.6
      Code:
        ZipFile: |
          from os import getenv
          from boto3 import client
          ecs = client('ecs')

          def handler(event, context):
            ecs.run_task(
              cluster=getenv('CLUSTER_NAME'),
              launchType='FARGATE',
              taskDefinition=event.get('taskDefinition'),
              count=1,
              platformVersion='LATEST',
              networkConfiguration={'awsvpcConfiguration': {
                'subnets': getenv('SUBNETS').split(','),
                'securityGroups': getenv('SECURITY_GROUPS').split(','),
                'assignPublicIp': 'ENABLED'
              }},
            )

  # Grant lambda permission to run task.
  FargateLauncherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: custom
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Condition:
                  ArnEquals:
                    ecs:cluster: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}'
                Action:
                  - ecs:RunTask
                Resource: !Ref TaskDef
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  # Roles used in TaskDefinition
                  - !GetAtt 'TaskRole.Arn'
                  - !GetAtt 'TaskExecutionRole.Arn'

  # Grant CloudWatch permission to call lambda.
  FargateLauncherInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FargateLauncher
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleRule.Arn

Outputs:
  TaskDefArn:
    Value: !Ref TaskDef
